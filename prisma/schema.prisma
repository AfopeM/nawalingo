// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core User model
model User {
  id                String   @id @default(uuid()) @db.Uuid
  email             String   @unique
  username          String?
  timezone          String? // IANA timezone string
  profile_image_url String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  roles          UserRole[]
  studentProfile StudentProfile?
  tutorProfile   TutorProfile?
  availability   Availability[]
  tutorRatings   TutorRating[]   @relation("TutorRatings")
  studentRatings TutorRating[]   @relation("StudentRatings")
}

// Role management
enum Role {
  student
  tutor
}

enum RoleStatus {
  pending
  approved
  suspended
}

model UserRole {
  id         String     @id @default(uuid()) @db.Uuid
  user_id    String     @db.Uuid
  role       Role
  status     RoleStatus @default(pending)
  created_at DateTime   @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, role])
}

model StudentProfile {
  id                   String   @id @default(uuid()) @db.Uuid
  user_id              String   @unique @db.Uuid
  target_languages     String[]
  onboarding_completed Boolean  @default(false)
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

// Tutor profile information
model TutorProfile {
  id                  String   @id @default(uuid()) @db.Uuid
  user_id             String   @unique @db.Uuid
  bio                 String?
  languages_taught    Json // [{"language": "Spanish", "proficiency": "native"}]
  teaching_experience String?
  country             String?
  is_active           Boolean  @default(true)
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

// Availability type enum
enum AvailabilityType {
  STUDENT_PREFERRED
  TUTOR_AVAILABLE
}

// Unified availability for both students and tutors
model Availability {
  id           String           @id @default(uuid()) @db.Uuid
  user_id      String           @db.Uuid
  type         AvailabilityType
  day_of_week  Int // 0-6 (Sunday-Saturday)
  start_minute Int // Minutes since midnight (540 = 9:00 AM)
  end_minute   Int // Minutes since midnight (660 = 11:00 AM)
  timezone     String // IANA timezone string
  created_at   DateTime         @default(now())
  updated_at   DateTime         @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, day_of_week])
  @@index([day_of_week, start_minute, end_minute])
  @@index([type, day_of_week, start_minute, end_minute])
}

// Tutor ratings and feedback
model TutorRating {
  id         String   @id @default(uuid()) @db.Uuid
  tutor_id   String   @db.Uuid
  student_id String   @db.Uuid
  rating     Int // 1-5
  feedback   String?
  session_id String?  @db.Uuid // For future reference
  created_at DateTime @default(now())

  tutor   User @relation("TutorRatings", fields: [tutor_id], references: [id], onDelete: Cascade)
  student User @relation("StudentRatings", fields: [student_id], references: [id], onDelete: Cascade)

  @@index([tutor_id])
  @@index([student_id])
}
