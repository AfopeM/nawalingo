// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid()) @db.Uuid
  email             String    @unique
  username          String?   @unique // Add unique constraint
  first_name        String? // Split name fields
  last_name         String?
  timezone          String?   @default("UTC") // Default timezone
  profile_image_url String?
  email_verified    Boolean   @default(false) // Email verification
  is_active         Boolean   @default(true) // Soft delete capability
  country           String?
  last_login_at     DateTime?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  roles          UserRoleAssignment[]
  studentProfile StudentProfile?
  tutorProfile   TutorProfile?
  availability   Availability[]
  tutorRatings   TutorRating[]        @relation("TutorRatings")
  studentRatings TutorRating[]        @relation("StudentRatings")
  auditLogs      AuditLog[]
}

// Workflow status for user-role applications or suspensions
enum RoleStatus {
  IN_PROGRESS
  SUBMITTED
  APPROVED
  REJECTED
  SUSPENDED
}

// =========================================================
//   Role / Permission Architecture (table-driven)
// =========================================================

// Fine-grained permissions (enum for now)
// Removed the AdminPermission enum and introduced a dynamic Permission model
model Permission {
  id              String                     @id @default(uuid()) @db.Uuid
  name            String                     @unique
  description     String?
  rolePermissions RolePermissionAssignment[]
  created_at      DateTime                   @default(now())
  updated_at      DateTime                   @updatedAt
}

model Role {
  id          String                     @id @default(uuid()) @db.Uuid
  name        String                     @unique
  permissions RolePermissionAssignment[]
  userRoles   UserRoleAssignment[]
  created_at  DateTime                   @default(now())
  updated_at  DateTime                   @updatedAt
}

model RolePermissionAssignment {
  id            String @id @default(uuid()) @db.Uuid
  role_id       String @db.Uuid
  permission_id String @db.Uuid

  role       Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@unique([role_id, permission_id])
}

model UserRoleAssignment {
  id         String     @id @default(uuid()) @db.Uuid
  user_id    String     @db.Uuid
  role_id    String     @db.Uuid
  status     RoleStatus @default(IN_PROGRESS)
  created_at DateTime   @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([user_id, role_id])
}

model AuditLog {
  id          String   @id @default(uuid()) @db.Uuid
  user_id     String?  @db.Uuid
  action      String // "CREATE_USER", "UPDATE_PROFILE", etc.
  entity_type String // "User", "TutorProfile", etc.
  entity_id   String?  @db.Uuid
  old_values  Json?    @db.JsonB
  new_values  Json?    @db.JsonB
  ip_address  String?
  user_agent  String?
  created_at  DateTime @default(now())

  user User? @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([entity_type, entity_id])
  @@index([created_at])
}

// =========================================================
//   Language and Profile Management
// =========================================================

// Define the LanguageProficiency enum
enum LanguageProficiency {
  NATIVE
  FLUENT
  ADVANCED
  INTERMEDIATE
  BEGINNER
}

// Language model
model Language {
  id          String  @id @default(uuid()) @db.Uuid
  code        String  @unique // ISO 639-1 code
  name        String
  native_name String
  is_active   Boolean @default(true)

  tutorLanguages   TutorLanguage[]
  studentLanguages StudentLanguage[]
}

// StudentProfile model
model StudentProfile {
  id                   String   @id @default(uuid()) @db.Uuid
  user_id              String   @unique @db.Uuid
  onboarding_completed Boolean  @default(false)
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  user             User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  studentLanguages StudentLanguage[]
}

// StudentLanguage join model for many-to-many relationship
model StudentLanguage {
  id          String              @id @default(uuid()) @db.Uuid
  student_id  String              @db.Uuid
  language_id String              @db.Uuid
  proficiency LanguageProficiency

  student  StudentProfile @relation(fields: [student_id], references: [id], onDelete: Cascade)
  language Language       @relation(fields: [language_id], references: [id], onDelete: Cascade)

  @@unique([student_id, language_id])
}

// Tutor profile information
model TutorProfile {
  id                  String   @id @default(uuid()) @db.Uuid
  user_id             String   @unique @db.Uuid
  intro               String?
  teaching_experience String?
  is_active           Boolean  @default(true)
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  user           User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tutorLanguages TutorLanguage[]
}

// TutorLanguage join model for many-to-many relationship
model TutorLanguage {
  id          String              @id @default(uuid()) @db.Uuid
  tutor_id    String              @db.Uuid
  language_id String              @db.Uuid
  proficiency LanguageProficiency
  is_teaching Boolean             @default(true)

  tutor    TutorProfile @relation(fields: [tutor_id], references: [id], onDelete: Cascade) // Changed from User to TutorProfile
  language Language     @relation(fields: [language_id], references: [id], onDelete: Cascade)

  @@unique([tutor_id, language_id])
}

// =========================================================
//   User Scheduling and Feedback
// =========================================================

// Availability type enum
enum AvailabilityType {
  STUDENT_AVAILABILITY
  TUTOR_AVAILABILITY
}

// Unified availability for both students and tutors
model Availability {
  id           String           @id @default(uuid()) @db.Uuid
  user_id      String           @db.Uuid
  type         AvailabilityType
  day_of_week  Int // 0-6 (Sunday-Saturday)
  start_minute Int // Minutes since midnight (540 = 9:00 AM)
  end_minute   Int // Minutes since midnight (660 = 11:00 AM)
  timezone     String?          @default("UTC")
  is_recurring Boolean          @default(true)
  valid_from   DateTime? // For temporary availability
  valid_until  DateTime?
  is_active    Boolean          @default(true)
  created_at   DateTime         @default(now())
  updated_at   DateTime         @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, type, is_active])
  @@index([day_of_week, start_minute, end_minute, is_active])
}

// Tutor ratings and feedback
model TutorRating {
  id               String   @id @default(uuid()) @db.Uuid
  tutor_id         String   @db.Uuid
  student_id       String   @db.Uuid
  overall_rating   Int // 1-5
  communication    Int? // 1-5
  teaching_quality Int? // 1-5
  punctuality      Int? // 1-5
  feedback         String?
  session_id       String?  @db.Uuid
  is_verified      Boolean  @default(false) // Verified booking
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  tutor   User @relation("TutorRatings", fields: [tutor_id], references: [id], onDelete: Cascade)
  student User @relation("StudentRatings", fields: [student_id], references: [id], onDelete: Cascade)

  @@unique([tutor_id, student_id, session_id]) // Prevent duplicate ratings
  @@index([tutor_id, is_verified])
}
